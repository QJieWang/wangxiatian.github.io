<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中文新书选择</title>
      <link href="/2022/01/10/zhong-wen-xin-shu-xuan-ze/"/>
      <url>/2022/01/10/zhong-wen-xin-shu-xuan-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="中文新书选择"><a href="#中文新书选择" class="headerlink" title="中文新书选择"></a>中文新书选择</h1><p>计算机技术类的书，除了一些基础书目，其实都比较讲究新（新知识，新方法，新出版），自己选择参考书目和技术类文献的时候也通常限定在两年内，但是在看课外文学书的时候就比较少。所以，自己做了一个中文新书选择的总结。</p><h2 id="四大文学奖项"><a href="#四大文学奖项" class="headerlink" title="四大文学奖项"></a>四大文学奖项</h2><p>首先从中国四大文学奖出发，看看最近得奖的新书是不是符合自己的口味。</p><ol><li><p>“<a href="https://baike.baidu.com/item/%E8%80%81%E8%88%8D%E6%96%87%E5%AD%A6%E5%A5%96/344095">老舍文学奖</a>”是国内奖金最高的文学奖。是一项面向全国的综合性文学艺术大奖，每三年举办一届，由老舍文艺基金会和北京市文联共同举办。1988年5月成立，老舍文学奖的奖项分别是长篇小说奖、中篇小说奖、散文奖、戏剧剧本奖和青年戏剧文学奖。</p></li><li><p>“<a href="https://baike.baidu.com/item/%E8%8C%85%E7%9B%BE%E6%96%87%E5%AD%A6%E5%A5%96">茅盾文学奖</a>”是中国第一次设立的以个人名字命名的文学奖，只奖励<a href="https://baike.baidu.com/item/%E9%95%BF%E7%AF%87%E5%B0%8F%E8%AF%B4">长篇小说</a>创作。茅盾文学奖由<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%9B%BD%E4%BD%9C%E5%AE%B6%E5%8D%8F%E4%BC%9A/2049478">中国作家协会</a>主办。成立于1982年，每四年评选一次。</p></li><li><p>“<a href="https://baike.baidu.com/item/%E9%B2%81%E8%BF%85%E6%96%87%E5%AD%A6%E5%A5%96/159357">鲁迅文学奖</a>”，是为鼓励优秀中篇小说、短篇小说、报告文学、诗歌、散文、杂文、文学理论和评论作品的创作，鼓励优秀外国文学作品的翻译，推动社会主义文学事业的繁荣与发展而设立的。创立于1986年。1997年，首次评奖工作正式启动。由中国作家协会主办，每三年评选一次。</p></li><li><p>“<a href="https://baike.baidu.com/item/%E6%9B%B9%E7%A6%BA%E6%88%8F%E5%89%A7%E6%96%87%E5%AD%A6%E5%A5%96/9916843">曹禺戏剧文学奖</a>”，是专就优秀的剧本创作所进行的全国性评奖，代表我国戏剧创作最高水准。其前身是创办于1980年的全国优秀剧本奖，1994年该奖项更名为曹禺戏剧文学奖。每年评选一次，每届评出10个正式奖和10个提名奖。</p></li></ol><h2 id="豆瓣书单"><a href="#豆瓣书单" class="headerlink" title="豆瓣书单"></a>豆瓣书单</h2><p>其实参考豆瓣年度书单更多，网址是<a href="https://book.douban.com/annual/2021">豆瓣2021年度读书榜单 (douban.com)</a>。把URL后缀中的年份改成指定的年份，就能自由翻阅近几年的榜单。但是，翻译作品较多。你问我翻译作品的品质，emm，我也不敢批评，也怕被人肉。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 课外兴趣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年终总结</title>
      <link href="/2021/12/30/2021-nian-zhong-zong-jie/"/>
      <url>/2021/12/30/2021-nian-zhong-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="2021年终总结"><a href="#2021年终总结" class="headerlink" title="2021年终总结"></a>2021年终总结</h1><h2 id="1-收获"><a href="#1-收获" class="headerlink" title="1. 收获"></a>1. 收获</h2><p>2021年尝试了很多的新东西，遇见了许多奔走的路人，其中五一环巢湖与桂林调研让我影响深刻。用一个公式描述自己在环巢湖过程中学到的东西，<br>$$<br>不放弃就是胜利+相互帮扶能让团队走得更远<br>$$</p><p>这两句体会我会时刻放在心上，同时这段经历也注定会陪我度过许多未知的困难。</p><h2 id="2-环巢湖"><a href="#2-环巢湖" class="headerlink" title="2. 环巢湖"></a>2. 环巢湖</h2><p>环巢湖对于擅长骑车的人，充满了趣味与挑战，对于我则多收获了一份痛苦，当然这份痛苦是来自自身，与任何人都没有关系。</p><p>起初是有人在群里招呼五一环巢湖，研究生下学期的课程比较轻松，我也看了下地图200公里，结合自己去紫蓬山的经历，感觉自己不会出丑，便申请加入。当时感兴趣的人很多，群里的人数在七个左右吧，其实不乏女生爱骑行。出发前自己也简单的锻炼了几次，对自己信心满满。最后，在队长的组织下，请到了两位环过巢湖的学长带路，如果没有请到这两位有经验的学长，这次骑行可能真的会一地鸡毛。</p><p>出发定在了早上七点，在科大东区的西大门，这也是我们第一次见面。<br>出发没多久，我就落后了……<br>我就落后了……<br>……<br>这里面有身体素质的因素，也有老伙计不给力的原因。不知道为什么骑车会脖子疼，很离谱，但是这种东西也很难和别人说，两位师兄帮我调了下车座椅的高度，教我用脚尖发力而不是脚掌，车锁要盘在车座下面……学到了很多专业的知识，只可惜脖子疼没解决。种种原因让我一直保持在车队的最后一位，前一位真的在视线的边缘，忽隐忽现。我自己观察了一下，在上坡的时候容易被大家拉开距离。想来三个因素：身体素质，变速技巧，骑行技巧。</p><h2 id="2-疑惑"><a href="#2-疑惑" class="headerlink" title="2. 疑惑"></a>2. 疑惑</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCNet2021</title>
      <link href="/2021/12/30/bcnet2021/"/>
      <url>/2021/12/30/bcnet2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Deep-Occlusion-Aware-Instance-Segmentation-with-Overlapping-BiLayers-BCNet-CVPR-2021"><a href="#Deep-Occlusion-Aware-Instance-Segmentation-with-Overlapping-BiLayers-BCNet-CVPR-2021" class="headerlink" title="Deep Occlusion-Aware Instance Segmentation with Overlapping BiLayers [BCNet, CVPR 2021]"></a>Deep Occlusion-Aware Instance Segmentation with Overlapping BiLayers [BCNet, CVPR 2021]</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><a href="https://github.com/lkeab/BCNet">官方地址</a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>基于Detectron2（写过一篇关于<a href="https://wangxiatian.github.io/2021/12/30/detectron2/">Detectron2 </a>的文章）</p><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul><li>在一阶段和二阶段实例分割网络中达到了SOTA水平</li><li>全新的遮罩头部</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CVPR </tag>
            
            <tag> 实例分割 </tag>
            
            <tag> amodal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客计划</title>
      <link href="/2021/12/30/bo-ke-ji-hua/"/>
      <url>/2021/12/30/bo-ke-ji-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="博客计划"><a href="#博客计划" class="headerlink" title="博客计划"></a>博客计划</h1><h2 id="需要改进的地方"><a href="#需要改进的地方" class="headerlink" title="需要改进的地方"></a>需要改进的地方</h2><ul><li><input disabled="" type="checkbox"> 原生内容替换（感谢主题<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>）</li><li><input disabled="" type="checkbox"> 文章摘要</li><li><input disabled="" type="checkbox"> 背景图片</li><li><input disabled="" type="checkbox"> typora主题</li><li><input disabled="" type="checkbox"> 个人简历</li><li><input disabled="" type="checkbox"> 博客内容增加</li><li><input disabled="" type="checkbox"> 公众号绑定</li><li><input disabled="" type="checkbox"> 多平台同步</li><li><input disabled="" type="checkbox"> google+百度检索</li><li><input disabled="" type="checkbox"> 视频+博客</li></ul><h2 id="博客定位"><a href="#博客定位" class="headerlink" title="博客定位"></a>博客定位</h2><p>科研笔记+技术分享</p><h2 id="预期目标"><a href="#预期目标" class="headerlink" title="预期目标"></a>预期目标</h2><p><span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>多多关注</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计划 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Detectron2</title>
      <link href="/2021/12/30/detectron2/"/>
      <url>/2021/12/30/detectron2/</url>
      
        <content type="html"><![CDATA[<h1 id="Detectron2"><a href="#Detectron2" class="headerlink" title="Detectron2"></a>Detectron2</h1><h2 id="0-本文的基本信息"><a href="#0-本文的基本信息" class="headerlink" title="0. 本文的基本信息"></a>0. 本文的基本信息</h2><p>本文写于2021年12月27日。12章往后的内容需要自己在实战中结合自己的理解重新编写，所以会继续修改。Detectron2将分为两个文章，一个是本文基于config另一个是cloab形式基于API的。</p><p>官网很重要，常看官网。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>Detectron2 是Facebook AI Research提供的一款算法库，包含目标检测和分割。完全由PyTorch编写，可以用来学习与快速部署。</p><div align="center">  <img src="https://user-images.githubusercontent.com/1381301/66535560-d3422200-eace-11e9-9123-5535d469db19.png"></div><p>几个关键的链接</p><ul><li><a href="https://github.com/facebookresearch/detectron2">官方Github链接</a></li><li><a href="https://detectron2.readthedocs.io/en/latest/tutorials/getting_started.html">官方教程</a></li></ul><h2 id="2-使用教程"><a href="#2-使用教程" class="headerlink" title="2. 使用教程"></a>2. 使用教程</h2><h3 id="2-1-在自己的电脑上安装"><a href="#2-1-在自己的电脑上安装" class="headerlink" title="2.1.  在自己的电脑上安装"></a>2.1.  在自己的电脑上安装</h3><h4 id="1-限制"><a href="#1-限制" class="headerlink" title="1. 限制"></a>1. 限制</h4><ul><li><code>Detectron2</code>只能在Linux和MacOS上运行</li><li><code>python</code>版本  ≥ 3.6</li><li><code>PyTorch</code>版本  ≥ 3.6，<code>toechvision</code>需要与PyTorch版本一致（正常都是一起装的）</li><li>建议安装<code>OpenCV</code>，很多样例教程与可视化都依赖它</li></ul><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h4><p>提供两种安装方式，但是只有Linux有对应直接可用的预编译文件，同时每隔几个月<code>Detectron2</code>就有新版本，记得更新。</p><ul><li><p>自己编译（gcc &amp; g++ ≥ 5.4，同时推荐安装ninja可以加速编译）</p><ul><li><pre class="line-numbers language-shell"><code class="language-shell">python -m pip install 'git+https://github.com/facebookresearch/detectron2.git'# (add --user if you don't have permission)# Or, to install it from a local clone:git clone https://github.com/facebookresearch/detectron2.gitpython -m pip install -e detectron2# On macOS, you may need to prepend the above commands with a few environment variables:CC=clang CXX=clang++ ARCHFLAGS="-arch x86_64" python -m pip install ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>每次重新安装PyTorch后都需要重新编译才可用</p></li></ul></li><li><p>官方预编译文件（只有Linux有）</p><ul><li><p>需要看好对应的<code>Torch</code>和<code>CUDA</code>版本选择安装，如果两者组合不在官方列表之内（官方教程中查看），就需要自己编译。</p></li><li><p>首先查看自己的python版本</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># '1.9.0+cu111' 恰好在官方的支持之列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这里以<code>CUDA</code>11.1，<code>torch</code>1.9为例</p></li><li><pre class="line-numbers language-shell"><code class="language-shell">python -m pip install detectron2 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu111/torch1.9/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="2-2-在Colab与Docker使用"><a href="#2-2-在Colab与Docker使用" class="headerlink" title="2.2 在Colab与Docker使用"></a>2.2 在Colab与Docker使用</h3><p>Colab使用</p><ul><li><a href="https://colab.research.google.com/drive/16jcaJoc6bCFAQ96jDe2HwtXj7BMD_-m5">Detectron2 Tutorial.ipynb - Colaboratory (google.com)</a></li></ul><p>Docker使用</p><ul><li><a href="https://github.com/facebookresearch/detectron2/tree/main/docker">detectron2/docker at main · facebookresearch/detectron2 (github.com)</a></li></ul><p>两种方式都能避免在自己电脑上安装时出现的很多问题，即使在自己的电脑上也推荐使用Docker。</p><p>我自己Docker用的比较多所以就详细介绍一下Docker的安装与使用，一些缺点：之前安装过Docker与CUDA的依赖，所以这里比较简单，如果出现不能使用CUDA的情况，还是要自行百度的。</p><ul><li><ol><li><p>克隆官方仓库</p><pre class="line-numbers language-shell"><code class="language-shell">git clone https://github.com/facebookresearch/detectron2.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入<code>Detectron2</code>下的Docker目录</p><pre class="line-numbers language-shell"><code class="language-shell">cd docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编译<code>Docker</code></p><pre class="line-numbers language-shell"><code class="language-shell"># Docker是一层一层的下载，速度看个人，如果很慢可以百度添加阿里docker源docker build --build-arg USER_ID=$UID -t detectron2:v0 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动<code>Docker</code>并挂载文件夹</p><pre class="line-numbers language-shell"><code class="language-shell">docker run --gpus all -it --shm-size=8gb --env="DISPLAY" --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" --name=detectron2 detectron2:v0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开启图像显示</p><pre class="line-numbers language-shell"><code class="language-shell">xhost +local:`docker inspect --format='{{ .Config.Hostname }}' detectron2`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>个人的一些建议</p><p>推荐vscode远程连接<code>docker</code>镜像，可以自行百度，实现远程开发。</p><ol><li>安装插件<code>Remote Development</code>，会自动安装三个插件,详细看插件介绍。</li><li>vscode连接远程电脑（如果Docker在本机上就不需要了），一定要配置SSH免密登录，不然断连的体验会很糟糕。</li><li>vscode连接远程电脑里的Docker</li></ol></li></ol></li></ul><h2 id="3-开始食用-smirk"><a href="#3-开始食用-smirk" class="headerlink" title="3. 开始食用 :smirk:"></a>3. 开始食用 <span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h2><h3 id="1-Demo"><a href="#1-Demo" class="headerlink" title="1.Demo"></a>1.Demo</h3><p>以<code>Detectron2</code>项目文件夹为根目录,可以选择的模型在<a href="https://github.com/facebookresearch/detectron2/blob/main/MODEL_ZOO.md">detectron2/MODEL_ZOO.md</a>目录下有详细的介绍，这里只运行官方的demo</p><pre class="line-numbers language-shell"><code class="language-shell">cd demo/python demo.py --config-file ../configs/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml --input input1.jpg input2.jpg [--other-options] --opts MODEL.WEIGHTS detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl# 运行的会比较慢，需要下载官方与训练权重<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-命令行训练与评估"><a href="#2-命令行训练与评估" class="headerlink" title="2. 命令行训练与评估"></a>2. 命令行训练与评估</h3><p>在tool目录下有两个函数文件<code>plain_train_net.py</code>和<code>train_net.py</code>。这两个函数能训练<code>Detectron2</code>中的所有配置网络。这两个函数文件可以作为参考，编写用户自己的训练脚本。<br><code>plain_train_net.py</code>和<code>train_net.py</code>的区别：<code>plain_train_net.py</code>支持更少的特性，更少的抽象类，所以修改起来更容易。</p><p>想要评估网络效果只需要添加<code>--eval-only</code>,更多的参数选择可以查看函数文件或者使用<code>./train_net.py -h</code></p><h3 id="3-函数API使用"><a href="#3-函数API使用" class="headerlink" title="3. 函数API使用"></a>3. 函数API使用</h3><ol><li>参考官方的Colab<a href="https://colab.research.google.com/drive/16jcaJoc6bCFAQ96jDe2HwtXj7BMD_-m5">Detectron2 Tutorial.ipynb - Colaboratory (google.com)</a></li><li>更多基于detectron2的项目参考<a href="https://github.com/facebookresearch/detectron2/tree/main/projects">detectron2/projects at main · facebookresearch/detectron2 (github.com)</a>（但是这些项目的一些特性与稳定性不一定有Detectron2那么高）</li></ol><h2 id="4-构建内置数据集"><a href="#4-构建内置数据集" class="headerlink" title="4. 构建内置数据集"></a>4. 构建内置数据集</h2><p>可以通过<code>DasetCatalong</code>或者<code>MetadataCatalog</code>访问数据，详细参考<a href="https://detectron2.readthedocs.io/en/latest/tutorials/datasets.html">Custom Datasets</a>。同时<code>Detectron2</code>也内置了一些数据集,包括</p><ul><li>COCO</li><li>lvis</li><li>cityscapes</li><li>VOC20{07,12}</li></ul><p>可以通过命令，指定内置数据集的地址</p><pre class="line-numbers language-shell"><code class="language-shell"># /path/to/datasets默认为./datasetsexport DETECTRON2_DATASETS=/path/to/datasets<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-拓展Detectron2的功能"><a href="#5-拓展Detectron2的功能" class="headerlink" title="5. 拓展Detectron2的功能"></a>5. 拓展<code>Detectron2</code>的功能</h2><p>深度学习的研究意味着做新的工作，但是这就带来一个新的挑战，如何在代码抽象与具体实现中平衡。如果抽象层次很高，那么使用者就能利用框架简单的做很多的事，但是这也意味着很难实现研究者的创意与突破框架。就像是扫帚和吸尘器，虽然吸尘器很好用，解放了人力，但是想用吸尘器赶老鼠是不可能的（做一些创新），还是扫帚更好用。</p><p>在<code>Detectron2</code>中，通过提供两种接口来平衡，分别是<strong>配置接口</strong>与<strong>具体参数</strong></p><ul><li><p>配置接口（config argument） </p><ul><li><p>大家只需要在专家创建的<code>yml</code>文件的基础上进行修改，就能实现自己想要的效果，很多参数都有默认值，不了解都不会有影响，只需要记得常用的。详细可以参考<a href="https://detectron2.readthedocs.io/en/latest/tutorials/configs.html">Yacs Configs</a>。</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># load proper yaml config file, then</span>model <span class="token operator">=</span> build_model<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>具体参数（explicit arguments）</p><ul><li><p>每一个函数都是整个系统的一部分，使用者需要了解每一个参数的意义，并将这些函数拼装成一整个系统。详细可以参考<a href="https://detectron2.readthedocs.io/en/latest/tutorials/lazyconfigs.html">LazyConfig system</a></p></li><li><pre class="line-numbers language-python"><code class="language-python">model <span class="token operator">=</span> GeneralizedRCNN<span class="token punctuation">(</span>    backbone<span class="token operator">=</span>FPN<span class="token punctuation">(</span>        ResNet<span class="token punctuation">(</span>            BasicStem<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> norm<span class="token operator">=</span><span class="token string">"FrozenBN"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ResNet<span class="token punctuation">.</span>make_default_stages<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> stride_in_1x1<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> norm<span class="token operator">=</span><span class="token string">"FrozenBN"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            out_features<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"res2"</span><span class="token punctuation">,</span> <span class="token string">"res3"</span><span class="token punctuation">,</span> <span class="token string">"res4"</span><span class="token punctuation">,</span> <span class="token string">"res5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>freeze<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"res2"</span><span class="token punctuation">,</span> <span class="token string">"res3"</span><span class="token punctuation">,</span> <span class="token string">"res4"</span><span class="token punctuation">,</span> <span class="token string">"res5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token number">256</span><span class="token punctuation">,</span>        top_block<span class="token operator">=</span>LastLevelMaxPool<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    proposal_generator<span class="token operator">=</span>RPN<span class="token punctuation">(</span>        in_features<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token string">"p6"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        head<span class="token operator">=</span>StandardRPNHead<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> num_anchors<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        anchor_generator<span class="token operator">=</span>DefaultAnchorGenerator<span class="token punctuation">(</span>            sizes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            aspect_ratios<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            offset<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        anchor_matcher<span class="token operator">=</span>Matcher<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> allow_low_quality_matches<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        box2box_transform<span class="token operator">=</span>Box2BoxTransform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        batch_size_per_image<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>        positive_fraction<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>        pre_nms_topk<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        post_nms_topk<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nms_thresh<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    roi_heads<span class="token operator">=</span>StandardROIHeads<span class="token punctuation">(</span>        num_classes<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>        batch_size_per_image<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>        positive_fraction<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span>        proposal_matcher<span class="token operator">=</span>Matcher<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> allow_low_quality_matches<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        box_in_features<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token string">"p5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        box_pooler<span class="token operator">=</span>ROIPooler<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"ROIAlignV2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        box_head<span class="token operator">=</span>FastRCNNConvFCHead<span class="token punctuation">(</span>            ShapeSpec<span class="token punctuation">(</span>channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> conv_dims<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fc_dims<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        box_predictor<span class="token operator">=</span>FastRCNNOutputLayers<span class="token punctuation">(</span>            ShapeSpec<span class="token punctuation">(</span>channels<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            test_score_thresh<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span>            box2box_transform<span class="token operator">=</span>Box2BoxTransform<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            num_classes<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        mask_in_features<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token string">"p5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        mask_pooler<span class="token operator">=</span>ROIPooler<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"ROIAlignV2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        mask_head<span class="token operator">=</span>MaskRCNNConvUpsampleHead<span class="token punctuation">(</span>            ShapeSpec<span class="token punctuation">(</span>channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            num_classes<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>            conv_dims<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    pixel_mean<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">103.530</span><span class="token punctuation">,</span> <span class="token number">116.280</span><span class="token punctuation">,</span> <span class="token number">123.675</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    pixel_std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    input_format<span class="token operator">=</span><span class="token string">"BGR"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>配置与函数的结合</p><ul><li><p>一小部分被<a href="https://detectron2.readthedocs.io/en/latest/modules/config.html#detectron2.config.configurable">@configurable</a>修饰的函数与类，既可以被当成配置使用，也可以被当作函数接口使用。</p></li><li><pre class="line-numbers language-python"><code class="language-python">model <span class="token operator">=</span> GeneralizedRCNN<span class="token punctuation">(</span>  cfg<span class="token punctuation">,</span>  roi_heads<span class="token operator">=</span>StandardROIHeads<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> batch_size_per_image<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  pixel_std<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">57.0</span><span class="token punctuation">,</span> <span class="token number">57.0</span><span class="token punctuation">,</span> <span class="token number">57.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>如果你像实现基本功能，可以参看<a href="https://detectron2.readthedocs.io/en/latest/tutorials/getting_started.html">Beginner’s Tutorial</a>，如果像将<code>Detectron2</code>用到自己的项目中就需要查看</p><ul><li>Detectron2 includes a few standard datasets. To use custom ones, see <a href="https://detectron2.readthedocs.io/en/latest/tutorials/datasets.html">Use Custom Datasets</a>.</li><li>Detectron2 contains the standard logic that creates a data loader for training/testing from a dataset, but you can write your own as well. See <a href="https://detectron2.readthedocs.io/en/latest/tutorials/data_loading.html">Use Custom Data Loaders</a>.</li><li>Detectron2 implements many standard detection models, and provide ways for you to overwrite their behaviors. See <a href="https://detectron2.readthedocs.io/en/latest/tutorials/models.html">Use Models</a> and <a href="https://detectron2.readthedocs.io/en/latest/tutorials/write-models.html">Write Models</a>.</li><li>Detectron2 provides a default training loop that is good for common training tasks. You can customize it with hooks, or write your own loop instead. See <a href="https://detectron2.readthedocs.io/en/latest/tutorials/training.html">training</a>.</li></ul><h2 id="6-自定义数据集"><a href="#6-自定义数据集" class="headerlink" title="6. 自定义数据集"></a>6. 自定义数据集</h2><h3 id="6-1-注册数据集"><a href="#6-1-注册数据集" class="headerlink" title="6.1 注册数据集"></a>6.1 注册数据集</h3><p>官网也为<code>register</code>这个词感到<span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，其实就是搭建数据管道，让<code>Detectron2</code>知道如何读取数据。具体就是实现一个函数，函数需要能够读取数据中的每一个数据，并将这个函数与指定方法绑定。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_dataset_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">return</span> list<span class="token punctuation">[</span>dict<span class="token punctuation">]</span> <span class="token keyword">in</span> the following format <span class="token comment" spellcheck="true"># 需要实现的方法</span><span class="token keyword">from</span> detectron2<span class="token punctuation">.</span>data <span class="token keyword">import</span> DatasetCatalogDatasetCatalog<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">"my_dataset"</span><span class="token punctuation">,</span> my_dataset_function<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># later, to access the data:</span>data<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Dict<span class="token punctuation">]</span> <span class="token operator">=</span> DatasetCatalog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"my_dataset"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 函数绑定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-标准数据字典"><a href="#6-2-标准数据字典" class="headerlink" title="6.2 标准数据字典"></a>6.2 标准数据字典</h3><p>对于CV中常见的任务目标检测、实例/语义/全景分割、关键点检测，数据的格式与COCO的格式很相近，所有的数据存在一个list列表中，每个列表成员都是一个字典，总体表示为<code>list[dict]</code>。一般的字典数据与任务有关，可以参考</p><table><thead><tr><th>Task</th><th>Fields</th></tr></thead><tbody><tr><td>Common</td><td>file_name, height, width, image_id</td></tr><tr><td>Instance detection/segmentation</td><td>annotations</td></tr><tr><td>Semantic segmentation</td><td>sem_seg_file_name</td></tr><tr><td>Panoptic segmentation</td><td>pan_seg_file_name, segments_info</td></tr></tbody></table><ul><li><p><code>file_name</code>: the full path to the image file.</p></li><li><p><code>height</code>, <code>width</code>: integer. The shape of the image.</p></li><li><p><code>image_id</code> (str or int): a unique id that identifies this image. Required by many evaluators to identify the images, but a dataset may use it for different purposes.</p></li><li><p><code>annotations</code> (list[dict]): Required by <strong>instance detection/segmentation or keypoint detection</strong> tasks. Each dict corresponds to annotations of one instance in this image, and may contain the following keys:</p><ul><li><p><code>bbox</code> (list[float], required): list of 4 numbers representing the bounding box of the instance.</p></li><li><p><code>bbox_mode</code> (int, required): the format of bbox. It must be a member of <a href="https://detectron2.readthedocs.io/en/latest/modules/structures.html#detectron2.structures.BoxMode">structures.BoxMode</a>. Currently supports: <code>BoxMode.XYXY_ABS</code>, <code>BoxMode.XYWH_ABS</code>.</p></li><li><p><code>category_id</code> (int, required): an integer in the range [0, num_categories-1] representing the category label. The value num_categories is reserved to represent the “background” category, if applicable.</p></li><li><p><code>segmentation</code> (list[list[float]] or dict): the segmentation mask of the instance.</p><ul><li>If <code>list[list[float]]</code>, it represents a list of polygons, one for each connected component of the object. Each <code>list[float]</code> is one simple polygon in the format of <code>[x1, y1, ..., xn, yn]</code> (n≥3). The Xs and Ys are absolute coordinates in unit of pixels.</li><li>If <code>dict</code>, it represents the per-pixel segmentation mask in COCO’s compressed RLE format. The dict should have keys “size” and “counts”. You can convert a uint8 segmentation mask of 0s and 1s into such dict by <code>pycocotools.mask.encode(np.asarray(mask, order="F"))</code>. <code>cfg.INPUT.MASK_FORMAT</code> must be set to <code>bitmask</code> if using the default data loader with such format.</li></ul></li><li><p><code>keypoints</code> (list[float]): in the format of [x1, y1, v1,…, xn, yn, vn]. v[i] means the <a href="http://cocodataset.org/#format-data">visibility</a> of this keypoint. <code>n</code> must be equal to the number of keypoint categories. The Xs and Ys are absolute real-value coordinates in range [0, W or H].</p><p>(Note that the keypoint coordinates in COCO format are integers in range [0, W-1 or H-1], which is different from our standard format. Detectron2 adds 0.5 to COCO keypoint coordinates to convert them from discrete pixel indices to floating point coordinates.)</p></li><li><p><code>iscrowd</code>: 0 (default) or 1. Whether this instance is labeled as COCO’s “crowd region”. Don’t include this field if you don’t know what it means.</p></li></ul><p>If <code>annotations</code> is an empty list, it means the image is labeled to have no objects. Such images will by default be removed from training, but can be included using <code>DATALOADER.FILTER_EMPTY_ANNOTATIONS</code>.</p></li><li><p><code>sem_seg_file_name</code> (str): The full path to the semantic segmentation ground truth file. It should be a grayscale image whose pixel values are integer labels.</p></li><li><p><code>pan_seg_file_name</code> (str): The full path to panoptic segmentation ground truth file. It should be an RGB image whose pixel values are integer ids encoded using the <a href="https://github.com/cocodataset/panopticapi/">panopticapi.utils.id2rgb</a> function. The ids are defined by <code>segments_info</code>. If an id does not appear in <code>segments_info</code>, the pixel is considered unlabeled and is usually ignored in training &amp; evaluation.</p></li><li><p><code>segments_info</code> (list[dict]): defines the meaning of each id in panoptic segmentation ground truth. Each dict has the following keys:</p><ul><li><code>id</code> (int): integer that appears in the ground truth image.</li><li><code>category_id</code> (int): an integer in the range [0, num_categories-1] representing the category label.</li><li><code>iscrowd</code>: 0 (default) or 1. Whether this instance is labeled as COCO’s “crowd region”.</li></ul></li></ul><p>这没什么好解释的了……</p><p>如果像训练一个Fast R-CNN还需要提供格外的数据</p><ul><li><code>proposal_boxes</code> (array): 2D numpy array with shape (K, 4) representing K precomputed proposal boxes for this image.</li><li><code>proposal_objectness_logits</code> (array): numpy array with shape (K, ), which corresponds to the objectness logits of proposals in ‘proposal_boxes’.</li><li><code>proposal_bbox_mode</code> (int): the format of the precomputed proposal bbox. It must be a member of <a href="https://detectron2.readthedocs.io/en/latest/modules/structures.html#detectron2.structures.BoxMode">structures.BoxMode</a>. Default is <code>BoxMode.XYXY_ABS</code>.</li></ul><p>总的说来，具体任务的数据基本是通用的，如果有例外，自己添加即可。</p><h3 id="6-3-为新任务自定义数据字典"><a href="#6-3-为新任务自定义数据字典" class="headerlink" title="6.3 为新任务自定义数据字典"></a>6.3 为新任务自定义数据字典</h3><p>这可能需要修改后续的处理，但是在数据部分，只需要修改为<code>dataloader</code>写一个新的<code>mapper</code>函数。需要注意的是数据字典完整的保存在内存中，不要写太多的无用信息或加载太大的信息作为标签。对于一些共享的信息，使用<code>Metadata</code>。<br>注意事项汇总</p><ol><li>数据字典加载在内存中</li><li>不要加载太多，太大的信息</li><li>共享的信息，用<code>Metadata</code></li></ol><h3 id="6-4-数据集中的Metadata"><a href="#6-4-数据集中的Metadata" class="headerlink" title="6.4 数据集中的Metadata"></a>6.4 数据集中的<code>Metadata</code></h3><p>每个数据集都包含一些元信息（metadata），可以通过<code>MetadataCatalog.get(dataset_name).some_metadata</code>获取，以键值对的形式保存数据，常见的信息：类的名称，颜色，文件的根目录等。这些信息被用来当做函数参数，评价指标，可视化信息以及记载日志等。</p><p>一般流程为，先通过<code>DatasetCatalog.register</code>注册一个新的数据集，再通过<code>MetadataCatalog.get(dataset_name).some_key = some_value</code>添加元信息</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> detectron2<span class="token punctuation">.</span>data <span class="token keyword">import</span> MetadataCatalogMetadataCatalog<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"my_dataset"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>thing_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下表是在<code>Detectron2</code>项目中常用的元信息，如果不遵循以下建议，可能会导致一些功能特性无法使用。（辕信息的键值对是高度自由定义的，所以需要你与官方命名保持一致，方便使用官方的功能）</p><ul><li><code>thing_classes</code> (list[str]): Used by all instance detection/segmentation tasks. A list of names for each instance/thing category. If you load a COCO format dataset, it will be automatically set by the function <code>load_coco_json</code>.</li><li><code>thing_colors</code> (list[tuple(r, g, b)]): Pre-defined color (in [0, 255]) for each thing category. Used for visualization. If not given, random colors will be used.</li><li><code>stuff_classes</code> (list[str]): Used by semantic and panoptic segmentation tasks. A list of names for each stuff category.</li><li><code>stuff_colors</code> (list[tuple(r, g, b)]): Pre-defined color (in [0, 255]) for each stuff category. Used for visualization. If not given, random colors are used.</li><li><code>ignore_label</code> (int): Used by semantic and panoptic segmentation tasks. Pixels in ground-truth annotations with this category label should be ignored in evaluation. Typically these are “unlabeled” pixels.</li><li><code>keypoint_names</code> (list[str]): Used by keypoint detection. A list of names for each keypoint.</li><li><code>keypoint_flip_map</code> (list[tuple[str]]): Used by keypoint detection. A list of pairs of names, where each pair are the two keypoints that should be flipped if the image is flipped horizontally during augmentation.</li><li><code>keypoint_connection_rules</code>: list[tuple(str, str, (r, g, b))]. Each tuple specifies a pair of keypoints that are connected and the color (in [0, 255]) to use for the line between them when visualized.</li></ul><p>一些额外的信息是针对特定数据集（比如COCO）的验证过程：</p><ul><li><code>thing_dataset_id_to_contiguous_id</code> (dict[int-&gt;int]): Used by all instance detection/segmentation tasks in the COCO format. A mapping from instance class ids in the dataset to contiguous ids in range [0, #class). Will be automatically set by the function <code>load_coco_json</code>.</li><li><code>stuff_dataset_id_to_contiguous_id</code> (dict[int-&gt;int]): Used when generating prediction json files for semantic/panoptic segmentation. A mapping from semantic segmentation class ids in the dataset to contiguous ids in [0, num_categories). It is useful for evaluation only.</li><li><code>json_file</code>: The COCO annotation json file. Used by COCO evaluation for COCO-format datasets.</li><li><code>panoptic_root</code>, <code>panoptic_json</code>: Used by COCO-format panoptic evaluation.</li><li><code>evaluator_type</code>: Used by the builtin main training script to select evaluator. Don’t use it in a new training script. You can just provide the <a href="https://detectron2.readthedocs.io/en/latest/modules/evaluation.html#detectron2.evaluation.DatasetEvaluator">DatasetEvaluator</a> for your dataset directly in your main script.</li></ul><h3 id="6-5-COCO格式的数据集"><a href="#6-5-COCO格式的数据集" class="headerlink" title="6.5 COCO格式的数据集"></a>6.5 COCO格式的数据集</h3><p>如果实例级别数据已经按照COCO的格式保存为一个<code>json</code>文件，那么就能很简单的注册这个数据集</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> detectron2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> register_coco_instancesregister_coco_instances<span class="token punctuation">(</span><span class="token string">"my_dataset"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"json_annotation.json"</span><span class="token punctuation">,</span> <span class="token string">"path/to/image/dir"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果数据已经是COCO格式，但是想要更深入的处理，或有额外自定义的实例标注，可以参考<a href="https://detectron2.readthedocs.io/en/latest/modules/data.html#detectron2.data.datasets.load_coco_json">load_coco_json</a></p><h3 id="6-6-更新数据集的配置文件（需要重写）"><a href="#6-6-更新数据集的配置文件（需要重写）" class="headerlink" title="6.6 更新数据集的配置文件（需要重写）"></a>6.6 更新数据集的配置文件（需要重写）</h3><p>当你完成数据集的注册后，可以在<code>cfg.DATASETS.{TRAIN,TEST}</code>中使用你自定义的数据集名称。其他配置文件修改</p><ul><li><code>MODEL.ROI_HEADS.NUM_CLASSES</code> and <code>MODEL.RETINANET.NUM_CLASSES</code> are the number of thing classes for R-CNN and RetinaNet models, respectively.</li><li><code>MODEL.ROI_KEYPOINT_HEAD.NUM_KEYPOINTS</code> sets the number of keypoints for Keypoint R-CNN. You’ll also need to set <a href="http://cocodataset.org/#keypoints-eval">Keypoint OKS</a> with <code>TEST.KEYPOINT_OKS_SIGMAS</code> for evaluation.</li><li><code>MODEL.SEM_SEG_HEAD.NUM_CLASSES</code> sets the number of stuff classes for Semantic FPN &amp; Panoptic FPN.</li><li><code>TEST.DETECTIONS_PER_IMAGE</code> controls the maximum number of objects to be detected. Set it to a larger number if test images may contain &gt;100 objects.</li><li>If you’re training Fast R-CNN (with precomputed proposals), <code>DATASETS.PROPOSAL_FILES_{TRAIN,TEST}</code> need to match the datasets. The format of proposal files are documented <a href="https://detectron2.readthedocs.io/en/latest/modules/data.html#detectron2.data.load_proposals_into_dataset">here</a>.</li></ul><h2 id="7-数据加载器"><a href="#7-数据加载器" class="headerlink" title="7. 数据加载器"></a>7. 数据加载器</h2><p>数据加载器负责将数据送入模型。通常一个加载器需要负责从数据集中提取原始数据，并对数据进行预处理，将数据变成模型能够接受的数据。<br>$$<br>Dataloader = 提取数据（硬盘到内存）+数据预处理+传入模型<br>$$</p><h3 id="7-1-数据加载器的工作原理"><a href="#7-1-数据加载器的工作原理" class="headerlink" title="7.1 数据加载器的工作原理"></a>7.1 数据加载器的工作原理</h3><ol><li><p>首先通过数据集的注册名，加载数据字典<code>list[dict]</code>(轻量级，图像数据还没有加载进入内存)。</p></li><li><p>对数据字典中的每个元素进行map映射（可以理解为同时对多张图片进行并行化的预处理）</p><ul><li>用户可以自定义映射函数，默认为<a href="https://detectron2.readthedocs.io/en/latest/modules/data.html#detectron2.data.DatasetMapper">DatasetMapper</a>。</li><li>批处理映射得到的结果可以是任意的，只要格式能够被网络接受。</li><li>mapper的作用是对图像进行预处理，如果想要对图像进行自定义变换，需要自定义一个mapper</li></ul></li><li><p>mapper是基于批处理的</p></li><li><p>mapper的结果也是Dataloader的结果，一般也是模型的输入</p></li></ol><h3 id="7-2-自定义数据加载器"><a href="#7-2-自定义数据加载器" class="headerlink" title="7.2 自定义数据加载器"></a>7.2 自定义数据加载器</h3><p>缩放图像</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> detectron2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> T<span class="token keyword">from</span> detectron2<span class="token punctuation">.</span>data <span class="token keyword">import</span> DatasetMapper   <span class="token comment" spellcheck="true"># the default mapper</span>dataloader <span class="token operator">=</span> build_detection_train_loader<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span>   mapper<span class="token operator">=</span>DatasetMapper<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> is_train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> augmentations<span class="token operator">=</span><span class="token punctuation">[</span>      T<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># use this dataloader instead of the default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> detectron2<span class="token punctuation">.</span>data <span class="token keyword">import</span> detection_utils <span class="token keyword">as</span> utils <span class="token comment" spellcheck="true"># Show how to implement a minimal mapper, similar to the default DatasetMapper</span><span class="token keyword">def</span> <span class="token function">mapper</span><span class="token punctuation">(</span>dataset_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    dataset_dict <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>dataset_dict<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># it will be modified by code below</span>    <span class="token comment" spellcheck="true"># can use other ways to read image</span>    image <span class="token operator">=</span> utils<span class="token punctuation">.</span>read_image<span class="token punctuation">(</span>dataset_dict<span class="token punctuation">[</span><span class="token string">"file_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> format<span class="token operator">=</span><span class="token string">"BGR"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># See "Data Augmentation" tutorial for details usage</span>    auginput <span class="token operator">=</span> T<span class="token punctuation">.</span>AugInput<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    transform <span class="token operator">=</span> T<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>auginput<span class="token punctuation">)</span>    image <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>auginput<span class="token punctuation">.</span>image<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    annos <span class="token operator">=</span> <span class="token punctuation">[</span>        utils<span class="token punctuation">.</span>transform_instance_annotations<span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> <span class="token punctuation">[</span>transform<span class="token punctuation">]</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> annotation <span class="token keyword">in</span> dataset_dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"annotations"</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true"># create the format that the model expects</span>       <span class="token string">"image"</span><span class="token punctuation">:</span> image<span class="token punctuation">,</span>       <span class="token string">"instances"</span><span class="token punctuation">:</span> utils<span class="token punctuation">.</span>annotations_to_instances<span class="token punctuation">(</span>annos<span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>dataloader <span class="token operator">=</span> build_detection_train_loader<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> mapper<span class="token operator">=</span>mapper<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   如果想要修改的不仅仅是mapper，那么就需要重写一个dataloader，dataloader本质上是一个python迭代器，无论用什么方式都可以实例化一个。</p><h2 id="8-数据增强（未完成）缺少实战理解"><a href="#8-数据增强（未完成）缺少实战理解" class="headerlink" title="8. 数据增强（未完成）缺少实战理解"></a>8. 数据增强（未完成）缺少实战理解</h2><p>数据增强是训练的很重要一部分，<code>Detectron2</code>通过实现以下四个特性（功能）来实现数据增强功能。</p><ol><li>同时增强所有类型的数据（原图像，目标检测框，掩膜等信息一起变化）</li><li>静态数据增强声明（将很多的变化按照顺序排列）</li><li>允许增加新的数据类型进行数据增强。（除了1中包含的信息，也允许自定义）</li><li>仅通过参数设置进行增强</li></ol><h3 id="8-1-基础使用"><a href="#8-1-基础使用" class="headerlink" title="8.1 基础使用"></a>8.1 基础使用</h3><p>主要依赖特性1和2</p><pre><code>from detectron2.data import transforms as T# Define a sequence of augmentations:augs = T.AugmentationList([    T.RandomBrightness(0.9, 1.1),    T.RandomFlip(prob=0.5),    T.RandomCrop("absolute", (640, 640))])  # type: T.Augmentation# Define the augmentation input ("image" required, others optional):input = T.AugInput(image, boxes=boxes, sem_seg=sem_seg)# Apply the augmentation:transform = augs(input)  # type: T.Transformimage_transformed = input.image  # new imagesem_seg_transformed = input.sem_seg  # new semantic segmentation# For any extra data that needs to be augmented together, use transform, e.g.:image2_transformed = transform.apply_image(image2)polygons_transformed = transform.apply_polygons(polygons)</code></pre><h3 id="8-2-自定义增强函数"><a href="#8-2-自定义增强函数" class="headerlink" title="8.2 自定义增强函数"></a>8.2 自定义增强函数</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyColorAugmentation</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span>Augmentation<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_transform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> T<span class="token punctuation">.</span>ColorTransform<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyCustomResize</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span>Augmentation<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_transform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">:</span>        old_h<span class="token punctuation">,</span> old_w <span class="token operator">=</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        new_h<span class="token punctuation">,</span> new_w <span class="token operator">=</span> int<span class="token punctuation">(</span>old_h <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>old_w <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> T<span class="token punctuation">.</span>ResizeTransform<span class="token punctuation">(</span>old_h<span class="token punctuation">,</span> old_w<span class="token punctuation">,</span> new_h<span class="token punctuation">,</span> new_w<span class="token punctuation">)</span>augs <span class="token operator">=</span> MyCustomResize<span class="token punctuation">(</span><span class="token punctuation">)</span>transform <span class="token operator">=</span> augs<span class="token punctuation">(</span>input<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>class MyCustomCrop(T.Augmentation):    def get_transform(self, image, sem_seg):        # decide where to crop using both image and sem_seg        return T.CropTransform(...)augs = MyCustomCrop()assert hasattr(input, "image") and hasattr(input, "sem_seg")transform = augs(input)</code></pre><h3 id="8-3-高级用法"><a href="#8-3-高级用法" class="headerlink" title="8.3 高级用法"></a>8.3 高级用法</h3><h2 id="9-编写模型"><a href="#9-编写模型" class="headerlink" title="9. 编写模型"></a>9. 编写模型</h2><p>很多研究工作都需要从头开始实现功能，但是很多情况下可以借助覆写标准模型的模块来实现。</p><h3 id="9-1-注册组件"><a href="#9-1-注册组件" class="headerlink" title="9.1 注册组件"></a>9.1 注册组件</h3><p>完整的网络依据功能常常被分为<code>Backbone</code>，<code>box head</code>等，可以通过<code>Detectron2</code>实现组件的覆写。以添加新的baskbone为例</p><p>定义</p><pre><code>from detectron2.modeling import BACKBONE_REGISTRY, Backbone, ShapeSpec@BACKBONE_REGISTRY.register()class ToyBackbone(Backbone):  def __init__(self, cfg, input_shape):    super().__init__()    # create your own backbone    self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=16, padding=3)  def forward(self, image):    return {"conv1": self.conv1(image)}  def output_shape(self):    return {"conv1": ShapeSpec(channels=64, stride=16)}</code></pre><p>使用</p><pre><code>cfg = ...   # read a configcfg.MODEL.BACKBONE.NAME = 'ToyBackbone'   # or set it in the config filemodel = build_model(cfg)  # it will find `ToyBackbone` defined above</code></pre><h3 id="9-2-显示调用"><a href="#9-2-显示调用" class="headerlink" title="9.2 显示调用"></a>9.2 显示调用</h3><p>通过注册表虽然能实现一些功能，但是想更加细节的，还是需要自己实现。detectron2中的组件都有<code>__init__</code>属性，通过这个属性就能知道接受的参数。</p><p>以Faster R-CNN为例，自定义其中box head的损失函数</p><ol><li><p>损失函数在FastRCNNOutputLayers中计算，需要继承实现这个类，暂时将这个函数命名为<code>myRCNNOutput</code></p></li><li><p>使用</p><pre><code>roi_heads = StandardROIHeads(  cfg, backbone.output_shape(),  box_predictor=MyRCNNOutput(...))</code></pre></li><li><p>如果想要确保新组件从配置文件中而来，那就需要注册</p><pre class="line-numbers language-python"><code class="language-python">@ROI_HEADS_REGISTRY<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyStandardROIHeads</span><span class="token punctuation">(</span>StandardROIHeads<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">,</span> input_shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> input_shape<span class="token punctuation">,</span>                     box_predictor<span class="token operator">=</span>MyRCNNOutput<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="10-训练"><a href="#10-训练" class="headerlink" title="10. 训练"></a>10. 训练</h2><p>经过上面这些内容的学习，已经能够完成Dataloader和Model的搭建的，接下来就是训练过程了。有两种风格的代码。</p><h3 id="10-1-自定义循环训练"><a href="#10-1-自定义循环训练" class="headerlink" title="10.1 自定义循环训练"></a>10.1 自定义循环训练</h3><p>参考<a href="https://github.com/facebookresearch/detectron2/blob/main/tools/plain_train_net.py">tools/plain_train_net.py</a>完全是pytorch风格的，用户有极大的自由。</p><h3 id="10-2-抽象训练器"><a href="#10-2-抽象训练器" class="headerlink" title="10.2 抽象训练器"></a>10.2 抽象训练器</h3><p>Detectron2提供了一个标准的训练器，它带有hook系统，能够简化训练过程，主要包含两种实例化。</p><ol><li><a href="https://detectron2.readthedocs.io/en/latest/modules/engine.html#detectron2.engine.SimpleTrainer">SimpleTrainer</a>为单数据源，单优化器，单数据源的情况提供了一个最小训练循环。如果还想要checkpoint（模型保存与加载），日志记录等，就需要使用hook系统，参考<a href="https://detectron2.readthedocs.io/en/latest/modules/engine.html#detectron2.engine.HookBase">hook system</a>.</li><li><a href="https://detectron2.readthedocs.io/en/latest/modules/engine.html#detectron2.engine.defaults.DefaultTrainer">DefaultTrainer</a>是一个由yacs配置初始化的SimpleTrainer，被tools/train_net.py和许多脚本使用。它包含了更多标准的默认行为，包括优化器的默认配置，学习速度计划，日志，评估，检查点等。</li></ol><p>自定义一个DefaultTrainer。</p><ol><li><p>For simple customizations (e.g. change optimizer, evaluator, LR scheduler, data loader, etc.), overwrite <a href="https://detectron2.readthedocs.io/en/latest/modules/engine.html#detectron2.engine.defaults.DefaultTrainer">its methods</a> in a subclass, just like <a href="https://github.com/facebookresearch/detectron2/blob/main/tools/train_net.py">tools/train_net.py</a>.</p></li><li><p>For extra tasks during training, check the <a href="https://detectron2.readthedocs.io/en/latest/modules/engine.html#detectron2.engine.HookBase">hook system</a> to see if it’s supported.</p><p>As an example, to print hello during training:</p><pre><code>class HelloHook(HookBase):  def after_step(self):    if self.trainer.iter % 100 == 0:      print(f"Hello at iteration {self.trainer.iter}!")</code></pre></li><li><p>Using a trainer+hook system means there will always be some non-standard behaviors that cannot be supported, especially in research. For this reason, we intentionally keep the trainer &amp; hook system minimal, rather than powerful. If anything cannot be achieved by such a system, it’s easier to start from <a href="https://github.com/facebookresearch/detectron2/blob/main/tools/plain_train_net.py">tools/plain_train_net.py</a> to implement custom training logic manually.</p></li></ol><h3 id="10-3-日志记录指标"><a href="#10-3-日志记录指标" class="headerlink" title="10.3 日志记录指标"></a>10.3 日志记录指标</h3><p>在训练过程中，评价指标数据被放在集中事件存储 <a href="https://detectron2.readthedocs.io/en/latest/modules/utils.html#detectron2.utils.events.EventStorage">EventStorage</a>中，可以通过以下代码调用 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> detectron2<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>events <span class="token keyword">import</span> get_event_storage<span class="token comment" spellcheck="true"># inside the model:</span><span class="token keyword">if</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>  value <span class="token operator">=</span> <span class="token comment" spellcheck="true"># compute the value from inputs</span>  storage <span class="token operator">=</span> get_event_storage<span class="token punctuation">(</span><span class="token punctuation">)</span>  storage<span class="token punctuation">.</span>put_scalar<span class="token punctuation">(</span><span class="token string">"some_accuracy"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-评价"><a href="#11-评价" class="headerlink" title="11. 评价"></a>11. 评价</h2><p>除了实现常用数据库的评价之外，还可以以输入输出对自定义评价指标，以实例检测为例</p><pre><code>class Counter(DatasetEvaluator):  def reset(self):    self.count = 0  def process(self, inputs, outputs):    for output in outputs:      self.count += len(output["instances"])  def evaluate(self):    # save self.count somewhere, or print it, or return it.    return {"count": self.count}</code></pre><h3 id="11-1-使用"><a href="#11-1-使用" class="headerlink" title="11.1 使用"></a>11.1 使用</h3><pre><code>def get_all_inputs_outputs():  for data in data_loader:    yield data, model(data)evaluator.reset()for inputs, outputs in get_all_inputs_outputs():  evaluator.process(inputs, outputs)eval_results = evaluator.evaluate()</code></pre><p>也可以将评价指标与数据集绑定</p><pre><code>eval_results = inference_on_dataset(    model,    data_loader,    DatasetEvaluators([COCOEvaluator(...), Counter()]))</code></pre><p>与使用模型手动运行评估相比，此函数的好处在于，可以使用DatasetEvaluators将评估器合并在一起，并且所有评估都可以在数据集的一次前向传递中完成。这个函数还为给定的模型和数据集提供精确的速度基准。</p><h3 id="11-2-自定义评估器"><a href="#11-2-自定义评估器" class="headerlink" title="11.2 自定义评估器"></a>11.2 自定义评估器</h3><p>detectron2中的许多评估器都是针对特定的数据集，以便使用每个数据集的官方API获得分数。此外，以下两个评估器能够评估任何通用数据集，遵循detectron2的标准数据集格式，所以他们可以用来评估自定义数据集:</p><ul><li><a href="https://detectron2.readthedocs.io/en/latest/modules/evaluation.html#detectron2.evaluation.COCOEvaluator">COCOEvaluator</a> is able to evaluate AP (Average Precision) for box detection, instance segmentation, keypoint detection on any custom dataset.</li><li><a href="https://detectron2.readthedocs.io/en/latest/modules/evaluation.html#detectron2.evaluation.SemSegEvaluator">SemSegEvaluator</a> is able to evaluate semantic segmentation metrics on any custom dataset.</li></ul><h2 id="12-Yacs配置文件"><a href="#12-Yacs配置文件" class="headerlink" title="12. Yacs配置文件"></a>12. Yacs配置文件</h2><p>Detectron2基于键值对的配置文件系统能够用来执行标准行为。系统使用YAML和<a href="https://github.com/rbgirshick/yacs">yacs</a>。其中Yaml是功能比较有限的一门语言，并不能实现detectron2的所有功能，所以更推荐使用detectron2的API。</p><h3 id="12-1-基础使用"><a href="#12-1-基础使用" class="headerlink" title="12.1 基础使用"></a>12.1 基础使用</h3><pre><code>from detectron2.config import get_cfgcfg = get_cfg()    # obtain detectron2's default configcfg.xxx = yyy      # add new configs for your own custom componentscfg.merge_from_file("my_cfg.yaml")   # load values from a filecfg.merge_from_list(["MODEL.WEIGHTS", "weights.pth"])   # can also load values from a list of strprint(cfg.dump())  # print formatted configswith open("output.yaml", "w") as f:  f.write(cfg.dump())   # save config to file</code></pre><p>除了基本的Yaml语法外，配置文件还可以定义一个_BASE_: base.yaml。Yaml字段，它将首先加载基本配置文件。如果有任何冲突，基本配置中的值将在子配置中被覆盖。官方为标准模型体系结构提供了几个基本配置。detectron2中的许多内置工具接受命令行配置覆盖:命令行中提供的键值对将覆盖配置文件中的现有值。例如，<a href="https://github.com/facebookresearch/detectron2/blob/main/demo/demo.py">demo.py</a>可以用于</p><pre><code>./demo.py --config-file config.yaml [--other-options] \  --opts MODEL.WEIGHTS /path/to/weights INPUT.MIN_SIZE_TEST 1000</code></pre><h3 id="12-2-在项目中配置"><a href="#12-2-在项目中配置" class="headerlink" title="12.2 在项目中配置"></a>12.2 在项目中配置</h3><p>在detectron2库之外的项目可以定义自己的configs，需要添加这些configs才能使项目发挥作用，例如:</p><pre><code>from detectron2.projects.point_rend import add_pointrend_configcfg = get_cfg()    # obtain detectron2's default configadd_pointrend_config(cfg)  # add pointrend's default config# ... ...</code></pre><h3 id="12-3-最佳实践"><a href="#12-3-最佳实践" class="headerlink" title="12.3 最佳实践"></a>12.3 最佳实践</h3><ol><li>把你写的配置当作“代码”:避免复制它们;使用_BASE_在配置之间共享公共部分。</li><li>保持编写的配置简单:不要包含不会影响实验设置的键。</li></ol><h2 id="13-Lazy-配置"><a href="#13-Lazy-配置" class="headerlink" title="13. Lazy 配置"></a>13. Lazy 配置</h2><p>传统的基于yacs的配置系统提供基本的、标准的功能。然而，它不能为许多新项目提供足够的灵活性。Detectron2开发了一个可选的、非侵入性的配置系统，可用于detectron2或任何其他复杂项目。</p><h3 id="13-1-python语法"><a href="#13-1-python语法" class="headerlink" title="13.1 python语法"></a>13.1 python语法</h3><p>基于python的字典而不是Yaml，有以下几点好处</p><ol><li>借助python更好的操作字典。（增删）</li><li>编写简单的结构与共能</li><li>使用更多的数据类型与结构</li><li>使用Python导入语法导入/组合其他配置文件。</li></ol><p>使用</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># config.py:</span>a <span class="token operator">=</span> dict<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">=</span>dict<span class="token punctuation">(</span>xx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> dict<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># my_code.py:</span><span class="token keyword">from</span> detectron2<span class="token punctuation">.</span>config <span class="token keyword">import</span> LazyConfigcfg <span class="token operator">=</span> LazyConfig<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"path/to/config.py"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># an omegaconf dictionary</span><span class="token keyword">assert</span> cfg<span class="token punctuation">.</span>a<span class="token punctuation">.</span>z<span class="token punctuation">.</span>xx <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<a href="https://detectron2.readthedocs.io/en/latest/modules/config.html#detectron2.config.LazyConfig.load">LazyConfig.load</a>后，cfg就成为一个包含定义在全局上的所有字典信息的字典。需要注意的是</p><ul><li>All dictionaries are turned to an <a href="https://omegaconf.readthedocs.io/">omegaconf</a> config object during loading. This enables access to omegaconf features, such as its <a href="https://omegaconf.readthedocs.io/en/2.1_branch/usage.html#access-and-manipulation">access syntax</a> and <a href="https://omegaconf.readthedocs.io/en/2.1_branch/usage.html#variable-interpolation">interpolation</a>.</li><li>Absolute imports in <code>config.py</code> works the same as in regular Python.</li><li>Relative imports can only import dictionaries from config files. They are simply a syntax sugar for <a href="https://detectron2.readthedocs.io/en/latest/modules/config.html#detectron2.config.LazyConfig.load_rel">LazyConfig.load_rel</a>. They can load Python files at relative path without requiring <code>__init__.py</code>.</li></ul><p>（绝对/相对引入是什么？）</p><p><a href="https://detectron2.readthedocs.io/en/latest/modules/config.html#detectron2.config.LazyConfig.save">LazyConfig.save</a>可以将配置对象保存到yaml。注意，，这并不总是最有效的，如果配置文件中出现了不可序列化的对象(例如lambdas)。用户自行决定是否牺牲节省的能力来换取灵活性。</p><h3 id="13-2-递归的实例化"><a href="#13-2-递归的实例化" class="headerlink" title="13.2 递归的实例化"></a>13.2 递归的实例化</h3><p>We provide a helper function <a href="https://detectron2.readthedocs.io/en/latest/modules/config.html#detectron2.config.LazyCall">LazyCall</a> that helps create such dictionaries. The following code using <code>LazyCall</code></p><pre><code>from detectron2.config import LazyCall as Lfrom my_app import Trainer, Optimizercfg = L(Trainer)(  optimizer=L(Optimizer)(    lr=0.01,    algo="SGD"  ))</code></pre><p>creates a dictionary like this:</p><pre><code>cfg = {  "_target_": "my_app.Trainer",  "optimizer": {    "_target_": "my_app.Optimizer",    "lr": 0.01, "algo": "SGD"  }}</code></pre><p>By representing objects using such dictionaries, a general <a href="https://detectron2.readthedocs.io/en/latest/modules/config.html#detectron2.config.instantiate">instantiate</a> function can turn them into actual objects, i.e.:</p><pre><code>from detectron2.config import instantiatetrainer = instantiate(cfg)# equivalent to:# from my_app import Trainer, Optimizer# trainer = Trainer(optimizer=Optimizer(lr=0.01, algo="SGD"))</code></pre><p>This pattern is powerful enough to describe very complex objects, e.g.:</p><p>A Full Mask R-CNN described in recursive instantiation</p><pre><code>from detectron2.config import LazyCall as Lfrom detectron2.layers import ShapeSpecfrom detectron2.modeling.meta_arch import GeneralizedRCNNfrom detectron2.modeling.anchor_generator import DefaultAnchorGeneratorfrom detectron2.modeling.backbone.fpn import LastLevelMaxPoolfrom detectron2.modeling.backbone import BasicStem, FPN, ResNetfrom detectron2.modeling.box_regression import Box2BoxTransformfrom detectron2.modeling.matcher import Matcherfrom detectron2.modeling.poolers import ROIPoolerfrom detectron2.modeling.proposal_generator import RPN, StandardRPNHeadfrom detectron2.modeling.roi_heads import (    StandardROIHeads,    FastRCNNOutputLayers,    MaskRCNNConvUpsampleHead,    FastRCNNConvFCHead,)model = L(GeneralizedRCNN)(    backbone=L(FPN)(        bottom_up=L(ResNet)(            stem=L(BasicStem)(in_channels=3, out_channels=64, norm="FrozenBN"),            stages=L(ResNet.make_default_stages)(                depth=50,                stride_in_1x1=True,                norm="FrozenBN",            ),            out_features=["res2", "res3", "res4", "res5"],        ),        in_features="${.bottom_up.out_features}",        out_channels=256,        top_block=L(LastLevelMaxPool)(),    ),    proposal_generator=L(RPN)(        in_features=["p2", "p3", "p4", "p5", "p6"],        head=L(StandardRPNHead)(in_channels=256, num_anchors=3),        anchor_generator=L(DefaultAnchorGenerator)(            sizes=[[32], [64], [128], [256], [512]],            aspect_ratios=[0.5, 1.0, 2.0],            strides=[4, 8, 16, 32, 64],            offset=0.0,        ),        anchor_matcher=L(Matcher)(            thresholds=[0.3, 0.7], labels=[0, -1, 1], allow_low_quality_matches=True        ),        box2box_transform=L(Box2BoxTransform)(weights=[1.0, 1.0, 1.0, 1.0]),        batch_size_per_image=256,        positive_fraction=0.5,        pre_nms_topk=(2000, 1000),        post_nms_topk=(1000, 1000),        nms_thresh=0.7,    ),    roi_heads=L(StandardROIHeads)(        num_classes=80,        batch_size_per_image=512,        positive_fraction=0.25,        proposal_matcher=L(Matcher)(            thresholds=[0.5], labels=[0, 1], allow_low_quality_matches=False        ),        box_in_features=["p2", "p3", "p4", "p5"],        box_pooler=L(ROIPooler)(            output_size=7,            scales=(1.0 / 4, 1.0 / 8, 1.0 / 16, 1.0 / 32),            sampling_ratio=0,            pooler_type="ROIAlignV2",        ),        box_head=L(FastRCNNConvFCHead)(            input_shape=ShapeSpec(channels=256, height=7, width=7),            conv_dims=[],            fc_dims=[1024, 1024],        ),        box_predictor=L(FastRCNNOutputLayers)(            input_shape=ShapeSpec(channels=1024),            test_score_thresh=0.05,            box2box_transform=L(Box2BoxTransform)(weights=(10, 10, 5, 5)),            num_classes="${..num_classes}",        ),        mask_in_features=["p2", "p3", "p4", "p5"],        mask_pooler=L(ROIPooler)(            output_size=14,            scales=(1.0 / 4, 1.0 / 8, 1.0 / 16, 1.0 / 32),            sampling_ratio=0,            pooler_type="ROIAlignV2",        ),        mask_head=L(MaskRCNNConvUpsampleHead)(            input_shape=ShapeSpec(channels=256, width=14, height=14),            num_classes="${..num_classes}",            conv_dims=[256, 256, 256, 256, 256],        ),    ),    pixel_mean=[103.530, 116.280, 123.675],    pixel_std=[1.0, 1.0, 1.0],    input_format="BGR",)</code></pre><p>There are also objects or logic that cannot be described simply by a dictionary, such as reused objects or method calls. They may require some refactoring to work with recursive instantiation.</p><h3 id="13-3-使用Model-Zoo-LazyConfigs"><a href="#13-3-使用Model-Zoo-LazyConfigs" class="headerlink" title="13.3 使用Model Zoo LazyConfigs"></a>13.3 使用Model Zoo LazyConfigs</h3><h3 id="13-4-总结"><a href="#13-4-总结" class="headerlink" title="13.4 总结"></a>13.4 总结</h3><h2 id="14-部署"><a href="#14-部署" class="headerlink" title="14. 部署"></a>14. 部署</h2><p>用Python编写的模型需要经过导出过程才能成为可部署的构件。关于这个过程的一些基本概念:</p><p>“导出方法”是将Python模型完全序列化为可部署格式的方式。Detectron2支持以下导出方式:</p><ul><li><code>tracing</code>: see <a href="https://pytorch.org/tutorials/beginner/Intro_to_TorchScript_tutorial.html">pytorch documentation</a> to learn about it</li><li><code>scripting</code>: see <a href="https://pytorch.org/tutorials/beginner/Intro_to_TorchScript_tutorial.html">pytorch documentation</a> to learn about it</li><li><code>caffe2_tracing</code>: replace parts of the model by caffe2 operators, then use tracing.(将要被舍弃，不建议使用)</li></ul><table><thead><tr><th>Export Method</th><th>tracing</th><th>scripting</th><th>caffe2_tracing</th></tr></thead><tbody><tr><td><strong>Formats</strong></td><td>TorchScript</td><td>TorchScript</td><td>Caffe2, TorchScript, ONNX</td></tr><tr><td><strong>Runtime</strong></td><td>PyTorch</td><td>PyTorch</td><td>Caffe2, PyTorch</td></tr><tr><td>C++/Python inference</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Dynamic resolution</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Batch size requirement</td><td>Constant</td><td>Dynamic</td><td>Batch inference unsupported</td></tr><tr><td>Extra runtime deps</td><td>torchvision</td><td>torchvision</td><td>Caffe2 ops (usually alreadyincluded in PyTorch)</td></tr><tr><td>Faster/Mask/Keypoint R-CNN</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>RetinaNet</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>PointRend R-CNN</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>Cascade R-CNN</td><td>✅</td><td>❌</td><td>❌</td></tr></tbody></table><p><strong>“Format”</strong> is how a serialized model is described in a file, e.g. TorchScript, Caffe2 protobuf, ONNX format. <strong>“Runtime”</strong> is an engine that loads a serialized model and executes it, e.g., PyTorch, Caffe2, TensorFlow, onnxruntime, TensorRT, etc. A runtime is often tied to a specific format (e.g. PyTorch needs TorchScript format, Caffe2 needs protobuf format). We currently support the following combination and each has some limitations:</p><p><code>caffe2_tracing</code> is going to be deprecated. We don’t plan to work on additional support for other formats/runtime, but contributions are welcome.</p><h3 id="14-1-使用Tracing或Scripting进行部署"><a href="#14-1-使用Tracing或Scripting进行部署" class="headerlink" title="14.1 使用Tracing或Scripting进行部署"></a>14.1 使用Tracing或Scripting进行部署</h3><p>模型可以通过Tracing或Scripting导出为TorchScript格式。在Python或c++中，输出模型文件可以在不依赖于detectron2的情况下加载。导出的模型通常需要对一些自定义操作的torchvision(或其c++库)依赖。</p><p>该功能要求PyTorch≥1.8。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> Detectron2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerh挂载总结</title>
      <link href="/2021/12/27/dockerh-gua-zai-zong-jie/"/>
      <url>/2021/12/27/dockerh-gua-zai-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="关于Docker目录挂载的总结"><a href="#关于Docker目录挂载的总结" class="headerlink" title="关于Docker目录挂载的总结"></a>关于Docker目录挂载的总结</h1><h2 id="0-文章说明"><a href="#0-文章说明" class="headerlink" title="0.文章说明"></a>0.文章说明</h2><p>本文来自<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><a href="https://www.cnblogs.com/ivictor/p/4834864.html">关于Docker目录挂载的总结 - iVictor - 博客园 (cnblogs.com)</a><span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>，由于担心找不到所以才全文转载，在文章的开头着重说明。文章已经完整的看过，与自己的经验完全吻合，可以使用。（感觉博客园的质量远远高于CSDN）</p><p>Docker的使用场景（个人角度）</p><ul><li>配环境<ul><li>深度学习的很多环境以来比较难装，或不同步，使用Docker可以解决这个问题，直接拉取镜像就能开始生产，很舒服。</li></ul></li><li>打比赛<ul><li>很多比赛的需要将算法封装在Docker中，验证的时候只需要挂载数据集，主办方就能验证参赛者代码。</li></ul></li><li>其它</li></ul><h2 id="1-背景介绍"><a href="#1-背景介绍" class="headerlink" title="1. 背景介绍"></a>1. 背景介绍</h2><p>Docker容器启动的时候，如果要挂载宿主机的一个目录，可以用-v参数指定。</p><p>譬如我要启动一个centos容器，宿主机的/test目录挂载到容器的/soft目录，可通过以下方式指定：</p><p><code>docker run -it -v /test:/soft centos /bin/bash</code></p><p>这样在容器启动后，容器内会自动创建/soft的目录。通过这种方式，我们可以明确一点，即-v参数中，冒号”:”前面的目录是宿主机目录，后面的目录是容器内目录。</p><p>貌似简单，其实不然，下面我们来验证一下：</p><h2 id="一、容器目录不可以为相对路径"><a href="#一、容器目录不可以为相对路径" class="headerlink" title="一、容器目录不可以为相对路径"></a><strong>一、容器目录不可以为相对路径</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker run -it -v /test:soft centos /bin/bashinvalid value "/test:soft" for flag -v: soft is not an absolute pathSee 'docker run --help'.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接报错，提示<code>soft</code>不是一个绝对路径，所谓的绝对路径，必须以下斜线“/”开头。</p><h2 id="二、宿主机目录如果不存在，则会自动生成"><a href="#二、宿主机目录如果不存在，则会自动生成" class="headerlink" title="二、宿主机目录如果不存在，则会自动生成"></a><strong>二、宿主机目录如果不存在，则会自动生成</strong></h2><p>如果宿主机中存在<code>/test</code>目录，首先删除它</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# rm -rf /test[root@localhost ~]# ls /bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>启动容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker run -it -v /test:/soft centos /bin/bash[root@a487a3ca7997 /]# lsbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  soft  srv  sys  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看宿主机，发现新增了一个<code>/test</code>目录</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# ls /bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  test  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、宿主机的目录如果为相对路径呢？"><a href="#三、宿主机的目录如果为相对路径呢？" class="headerlink" title="三、宿主机的目录如果为相对路径呢？"></a><strong>三、宿主机的目录如果为相对路径呢？</strong></h2><p>这次，我们换个目录名<code>test1</code>试试</p><pre class="line-numbers language-shell"><code class="language-shell"># docker run -it -v test1:/soft centos /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再到宿主机上查看是否新增了一个<code>/test1</code>目录，结果没有，是不是因为我用的是相对路径，所以生成的<code>test1</code>目录在当前目录下，结果发现还是没有。那容器内的<code>/soft</code>目录挂载到哪里去了？通过<code>docker inspect</code>命令，查看容器<code>Mounts</code>那一部分，我们可以得到这个问题的答案。</p><pre class="line-numbers language-shell"><code class="language-shell">    "Mounts": [        {            "Name": "test1",            "Source": "/var/lib/docker/volumes/test1/_data",            "Destination": "/soft",            "Driver": "local",            "Mode": "z",            "RW": true        }    ],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，容器内的<code>/soft</code>目录挂载的是宿主机上的<code>/var/lib/docker/volumes/test1/_data</code>目录</p><p>原来，所谓的相对路径指的是<code>/var/lib/docker/volumes/</code>，与宿主机的当前目录无关。</p><h2 id="四、如果只是-v指定一个目录，这个又是如何对应呢？"><a href="#四、如果只是-v指定一个目录，这个又是如何对应呢？" class="headerlink" title="四、如果只是-v指定一个目录，这个又是如何对应呢？"></a><strong>四、如果只是-v指定一个目录，这个又是如何对应呢？</strong></h2><p>启动一个容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker run -it -v /test2 centos /bin/bash[root@ea24067bc902 /]# lsbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  test2  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样使用<code>docker inspect</code>命令查看宿主机的挂载目录</p><pre class="line-numbers language-shell"><code class="language-shell">"Mounts": [        {            "Name": "96256232eb74edb139d652746f0fe426e57fbacdf73376963e3acdb411b3d73a",            "Source": "/var/lib/docker/volumes/96256232eb74edb139d652746f0fe426e57fbacdf73376963e3acdb411b3d73a/_data",            "Destination": "/test2",            "Driver": "local",            "Mode": "",            "RW": true        }    ],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，同3中的结果类似，只不过，它不是相对路径的目录名，而是随机生成的一个目录名。</p><h2 id="五、如果在容器内修改了目录的属主和属组，那么对应的挂载点是否会修改呢？"><a href="#五、如果在容器内修改了目录的属主和属组，那么对应的挂载点是否会修改呢？" class="headerlink" title="五、如果在容器内修改了目录的属主和属组，那么对应的挂载点是否会修改呢？"></a><strong>五、如果在容器内修改了目录的属主和属组，那么对应的挂载点是否会修改呢？</strong></h2><p>首先开启一个容器，查看容器内<code>/soft</code>目录的属性</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker run -it -v /test:/soft centos /bin/bash[root@b5ed8216401f /]# ll -d /soft/drwxr-xr-x 2 root root 6 Sep 24 03:48 /soft/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看宿主机内<code>/test</code>目录的属性</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# ll -d /test/drwxr-xr-x 2 root root 6 Sep 24 11:48 /test/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在容器内新建用户，修改<code>/soft</code>的属主和属组</p><pre class="line-numbers language-shell"><code class="language-shell">[root@b5ed8216401f /]# useradd victor[root@b5ed8216401f /]# chown -R victor.victor /soft/[root@b5ed8216401f /]# ll -d /soft/drwxr-xr-x 2 victor victor 6 Sep 24 03:48 /soft/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再来看看宿主机内<code>/test</code>目录的属主和属组是否会发生变化？</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# ll -d /test/drwxr-xr-x 2 mycat mycat 6 Sep 24 11:48 /test/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>竟然变为<code>mycat</code>了。。。</p><p>原来，这个与<code>UID</code>有关系，<code>UID</code>，即“用户标识号”，是一个整数，系统内部用它来标识用户。一般情况下它与用户名是一一对应的。</p><p>首先查看容器内<code>victor</code>对应的<code>UID</code>是多少，</p><pre class="line-numbers language-shell"><code class="language-shell">[root@b5ed8216401f /]# cat /etc/passwd | grep victorvictor:x:1000:1000::/home/victor:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>victor</code>的<code>UID</code>为1000，那么宿主机内1000对应的用户是谁呢？</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# cat /etc/passwd |grep 1000mycat:x:1000:1000::/home/mycat:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看出，宿主机内UID 1000对应的用户是<code>mycat</code>。</p><h2 id="六、容器销毁了，在宿主机上新建的挂载目录是否会消失？"><a href="#六、容器销毁了，在宿主机上新建的挂载目录是否会消失？" class="headerlink" title="六、容器销毁了，在宿主机上新建的挂载目录是否会消失？"></a><strong>六、容器销毁了，在宿主机上新建的挂载目录是否会消失？</strong></h2><p>在这里，主要验证两种情况：一、指定了宿主机目录，即 <code>-v /test:/soft</code>。二、没有指定宿主机目录，即<code>-v /soft</code></p><p>第一种情况：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# rm -rf /test    --首先删除宿主机的/test目录[root@localhost ~]# ls /    --可以看到，宿主机上无/test目录bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@localhost ~]# docker run -it --name=centos_test -v /test:/soft centos /bin/bash  --启动容器，为了删除方便，我用--name参数指定了容器的名字[root@82ad7f3a779a /]# exitexit[root@localhost ~]# docker rm centos_test   --删除容器centos_test[root@localhost ~]# ls /   --发现 /test目录依旧存在bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  test  tmp  usr  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，即便容器销毁了，新建的挂载目录不会消失。进一步也可验证，如果宿主机目录的属主和属组发生了变化，容器销毁后，宿主机目录的属主和属组不会恢复到挂载之前的状态。</p><p>第二种情况，通过上面的验证知道，如果没有指定宿主机的目录，则容器会在<code>/var/lib/docker/volumes/</code>随机配置一个目录，那么我们看看这种情况下的容器销毁是否会导致相应目录的删除</p><p>首先启动容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker run -it --name=centos_test -v /soft centos /bin/bash[root@6b75579ec934 /]# exitexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过<code>docker inspect</code>命令查看容器在宿主机上生成的挂载目录</p><pre class="line-numbers language-shell"><code class="language-shell">    "Mounts": [        {            "Name": "b53164cb1c9f1917788638692fb22ad11994cf1fbbc2461b6c390cd3e10ea301",            "Source": "/var/lib/docker/volumes/b53164cb1c9f1917788638692fb22ad11994cf1fbbc2461b6c390cd3e10ea301/_data",            "Destination": "/soft",            "Driver": "local",            "Mode": "",            "RW": true        }    ],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的是<br><code>/var/lib/docker/volumes/b53164cb1c9f1917788638692fb22ad11994cf1fbbc2461b6c390cd3e10ea301/_data</code>目录</p><p>销毁容器，看目录是否存在</p><pre><code>[root@localhost ~]# docker rm centos_testcentos_test[root@localhost ~]# ll /var/lib/docker/volumes/b53164cb1c9f1917788638692fb22ad11994cf1fbbc2461b6c390cd3e10ea301total 0drwxr-xr-x 2 root root 6 Sep 24 14:25 _data</code></pre><p>发现该目录依旧存在，即便重启了<code>docker</code>服务，该目录依旧存在</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# systemctl restart docker[root@localhost ~]# ll /var/lib/docker/volumes/b53164cb1c9f1917788638692fb22ad11994cf1fbbc2461b6c390cd3e10ea301total 0drwxr-xr-x 2 root root 6 Sep 24 14:25 _data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、挂载宿主机已存在目录后，在容器内对其进行操作，报“Permission-denied”。"><a href="#七、挂载宿主机已存在目录后，在容器内对其进行操作，报“Permission-denied”。" class="headerlink" title="七、挂载宿主机已存在目录后，在容器内对其进行操作，报“Permission denied”。"></a><strong>七、挂载宿主机已存在目录后，在容器内对其进行操作，报“Permission denied”。</strong></h2><p>可通过两种方式解决：</p><p>1&gt; 关闭selinux。</p><p>临时关闭：# setenforce 0</p><p>永久关闭：修改/etc/sysconfig/selinux文件，将SELINUX的值设置为disabled。</p><p>2&gt; 以特权方式启动容器 </p><p>指定–privileged参数</p><p>如：# docker run -it –privileged=true -v /test:/soft centos /bin/bash</p><ul><li>dsa <ul><li>dsadsad <ul><li>dsadas </li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 计算机工具 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试字数与阅读时间</title>
      <link href="/2021/12/25/ce-shi-zi-shu-yu-yue-du-shi-jian/"/>
      <url>/2021/12/25/ce-shi-zi-shu-yu-yue-du-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:</p><ul><li>Typora</li><li>Markdown</li></ul><p>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:</p><ul><li>Typora</li><li>Markdown</li><li>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:<ul><li>Typora</li><li>Markdown</li><li>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:<ul><li>Typora</li><li>Markdown</li><li>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:<ul><li>Typora</li><li>Markdown</li><li>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:<ul><li>Typora</li><li>Markdown</li></ul></li></ul></li></ul></li><li>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:<ul><li>Typora</li><li>Markdown</li></ul></li></ul></li></ul><p>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:</p><ul><li>Typora</li><li>Markdown</li></ul><p>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:</p><ul><li>Typora</li><li>Markdown</li></ul><p>title: typora-vue-theme主题介绍<br>date: 2018-09-07 09:25:00<br>author: 赵奇<br>img: /source/images/xxx.jpg<br>top: true<br>hide: false<br>cover: true<br>coverImg: /images/1.jpg<br>password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<br>toc: false<br>mathjax: false<br>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<br>categories: Markdown<br>tags:</p><ul><li>Typora</li><li>Markdown</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码测试</title>
      <link href="/2021/12/25/mi-ma-ce-shi/"/>
      <url>/2021/12/25/mi-ma-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="测试密码保护"><a href="#测试密码保护" class="headerlink" title="测试密码保护"></a>测试密码保护</h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
